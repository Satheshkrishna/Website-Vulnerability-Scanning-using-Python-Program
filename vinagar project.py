import tkinter as tk
import requests
import validators
import os
import webbrowser
from tkinter import messagebox
from PIL import Image, ImageTk

class python:
    def __init__(self,root):
        self.root = root
        self.root.title("Website Security Check")
        self.root.geometry("700x500")
        self.root.resizable(False, False)

        image = Image.open('cyber (2).jpg')
        self.img = image.resize((700, 500))
        self.my_img = ImageTk.PhotoImage(self.img)
        self.l = tk.Label(self.root,image=self.my_img)
        self.l.pack()

        label = tk.Label(self.l, text="PYTHON (WAS):", width=30, font=("bold", 20), background='#AFDCEC', fg='#808000')
        label.place(x=120, y=35)

        label = tk.Label(self.l, bg="white", text="Enter the URL of the website:", width=30, font=("bold", 18), background='black',
                 fg='#808000')
        label.place(x=100, y=200)
        self.entry = tk.Entry(self.l,width=40)
        button1 = tk.Button(self.l, text="https status code",command=self.display , width=18, height=2, background='black', fg='#FFFFFF')
        button3 = tk.Button(self.l, text="check website link", command=self.check, width=18, height=2, background='black', fg='#FFFFFF')
        button4 = tk.Button(self.l, text="check firewall problem", command=self.lock, width=18, height=2, background='black', fg='#FFFFFF')
        button5 = tk.Button(self.l, text="bug checker", command=self.show, width=10, height=2, background='black', fg='#FFFFFF')

       
        label.place(x=140, y=100)
        self.entry.place(x=220, y=150)
        button1.place(x=20, y=280)
        button3.place(x=200, y=280)
        button4.place(x=400, y=280)
        button5.place(x=600, y=280)



    def is_website_secured_with_firewall(self,url):
        try:
            self.response = requests.get(url, verify=True)
            self.response = requests.get(url)
            status_code = self.response.status_code
            status_codes = [200, 201, 202, 203, 204, 205, 206, 300, 301, 302, 303, 304, 305, 306, 307, 308, 400, 401, 402,
                        403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424,
                        425, 426, 428, 429, 431, 444, 449, 450, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
                        510, 511]
            status_codes_dict = {200: "OK", 201: "Created", 202: "Accepted", 203: "Non-Authoritative Information",
                             204: "No Content", 205: "Reset Content", 206: "Partial Content", 300: "Multiple Choices",
                             301: "Moved Permanently", 302: "Found", 303: "See Other", 304: "Not Modified",
                             305: "Use Proxy", 306: "(Unused)", 307: "Temporary Redirect", 308: "Permanent Redirect",
                             400: "Bad Request", 401: "Unauthorized", 402: "Payment Required", 403: "Forbidden",
                             404: "Not Found", 405: "Method Not Allowed", 406: "Not Acceptable",
                             407: "Proxy Authentication Required", 408: "Request Timeout", 409: "Conflict", 410: "Gone",
                             411: "Length Required", 412: "Precondition Failed", 413: "Payload Too Large",
                             414: "URI Too Long", 415: "Unsupported Media Type", 416: "Range Not Satisfiable",
                             417: "Expectation Failed", 418: "I'm a teapot", 422: "Unprocessable Entity", 423: "Locked",
                             424: "Failed Dependency", 425: "Too Early", 426: "Upgrade Required",
                             428: "Precondition Required", 429: "Too Many Requests",
                             431: "Request Header Fields Too Large", 444: "Connection Closed Without Response",
                             449: "The request should be retried after doing the appropriate action",
                             450: "Blocked by Windows Parental Controls", 451: "Unavailable For Legal Reasons",
                             500: "Internal Server Error", 501: "Not Implemented", 502: "Bad Gateway",
                             503: "Service Unavailable", 504: "Gateway Timeout", 505: "HTTP Version Not Supported",
                             506: "Variant Also Negotiates", 507: "Insufficient Storage", 508: "Loop Detected",
                             509: "Bandwidth Limit Exceeded", 510: "Not Extended",
                             511: "Network Authentication Required"}

            if self.response.status_code == status_code:
                return True
            else:
                return False
        except:
            print("page not found in this website")


    def display(self):
        url = self.entry.get()
        self.response = requests.get(url)
        status_code = self.response.status_code
        print(status_code)
        status_codes = [200, 201, 202, 203, 204, 205, 206, 300, 301, 302, 303, 304, 305, 306, 307, 308, 400, 401, 402, 403,
                    404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426,
                    428, 429, 431, 444, 449, 450, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]
        status_codes_dict = {200: "OK", 201: "Created", 202: "Accepted", 203: "Non-Authoritative Information",
                         204: "No Content", 205: "Reset Content", 206: "Partial Content", 300: "Multiple Choices",
                         301: "Moved Permanently", 302: "Found", 303: "See Other", 304: "Not Modified",
                         305: "Use Proxy", 306: "(Unused)", 307: "Temporary Redirect", 308: "Permanent Redirect",
                         400: "Bad Request", 401: "Unauthorized", 402: "Payment Required", 403: "Forbidden",
                         404: "Not Found", 405: "Method Not Allowed", 406: "Not Acceptable",
                         407: "Proxy Authentication Required", 408: "Request Timeout", 409: "Conflict", 410: "Gone",
                         411: "Length Required", 412: "Precondition Failed", 413: "Payload Too Large",
                         414: "URI Too Long", 415: "Unsupported Media Type", 416: "Range Not Satisfiable",
                         417: "Expectation Failed", 418: "I'm a teapot", 422: "Unprocessable Entity", 423: "Locked",
                         424: "Failed Dependency", 425: "Too Early", 426: "Upgrade Required",
                         428: "Precondition Required", 429: "Too Many Requests", 431: "Request Header Fields Too Large",
                         444: "Connection Closed Without Response",
                         449: "The request should be retried after doing the appropriate action",
                         450: "Blocked by Windows Parental Controls", 451: "Unavailable For Legal Reasons",
                         500: "Internal Server Error", 501: "Not Implemented", 502: "Bad Gateway",
                         503: "Service Unavailable", 504: "Gateway Timeout", 505: "HTTP Version Not Supported",
                         506: "Variant Also Negotiates", 507: "Insufficient Storage", 508: "Loop Detected",
                         509: "Bandwidth Limit Exceeded", 510: "Not Extended", 511: "Network Authentication Required"}

        messagebox.showinfo("url status code", status_codes_dict[status_code])
        print(f"{status_code}")
        api_key = 'e9f330b1b01f949d611f797f365163ab1045bb129e6db71976bd3432c0a064bf'
        params = {'apikey': api_key, 'resource': url}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "User-Agent": "gzip,  My Python requests library example client or username"
        }
        self.response = requests.get('https://www.virustotal.com/vtapi/v2/url/report', params=params, headers=headers)

        self.result = self.response.json()
    
    
    def check(self):
        url = self.entry.get()
        valid = validators.url(url)
        print(valid)
        if valid == True:
            messagebox.showinfo("information", "website link is correct")

        else:
            messagebox.showinfo("information", "website link is not correct")
   

    def lock(self):
    
        url = self.entry.get()
    
        api_key = 'e9f330b1b01f949d611f797f365163ab1045bb129e6db71976bd3432c0a064bf'      
        params = {'apikey': api_key, 'resource': url}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "User-Agent": "gzip,  My Python requests library example client or username"
        }
        self.response = requests.get('https://www.virustotal.com/vtapi/v2/url/report', params=params, headers=headers)

        self.result = self.response.json()
        url = self.entry.get()
        valid = validators.url(url)
        if valid == True:
    
            if self.result['response_code'] == 1:
                scans = self.result['scans']
            
                print(f"python scanned results for {url}:")
                for scan in scans:
                    if scans[scan]['detected']:
                        messagebox.showinfo("some security problems..", f"{scan}: {scans[scan]['result']}")
                        messagebox.showinfo("information", "website is not secured with a firewall some technical issue")
                    

                        if valid == True:
                            a = messagebox.askyesno("information", "Some firewall issue do you open this website")
                            print(a)
                            if a == True:
                                webbrowser.open(url)
                            else:
                                break

    def show(self):
        url = self.entry.get()
        valid = validators.url(url)
        if valid == True:
                #messagebox.showinfo("information","")
            b = messagebox.askyesno("information", "Do you check the bug in website:")
            if b == True:
                os.chdir(r'C:\Users\krish\OneDrive\Desktop\vinagar first project\python code')
                os.chdir(r'C:\Users\krish\OneDrive\Desktop\vinagar first project\python code\nikto-master')

                os.system("perl nikto.pl" + " " + "-h" + " " + url)
            else:
                print(".....")

                a = messagebox.askyesno("information", "Do you open this website page")
                print(a)
                if a == True:
                   webbrowser.open(url)
                else:
                   print("...")
        
                   return False    
#show()
root = tk.Tk()
p=python(root)
#p.check()
root.mainloop()


